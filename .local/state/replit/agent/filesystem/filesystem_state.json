{"file_contents":{"app.js":{"content":"class SteamtoolsApp {\n    constructor() {\n        this.currentUser = null;\n        this.currentPage = 'home';\n        this.currentGameId = null;\n        this.init();\n    }\n\n    init() {\n        this.initializeData();\n        this.loadCurrentUser();\n        this.setupEventListeners();\n        this.renderPage();\n        this.updateStats();\n    }\n\n    async initializeData() {\n        // Initialize JSON files if they don't exist\n        try {\n            await fetch('/games.json');\n        } catch {\n            await this.saveToFile('games.json', []);\n        }\n\n        try {\n            await fetch('/users.json');\n        } catch {\n            const defaultUsers = [\n                { username: 'jupiter', password: '123es123as', role: 'admin', id: 1 },\n                { username: 'khaedus', password: 'coolgang57', role: 'admin', id: 2 },\n                { username: 'malte', password: 'maltese21', role: 'admin', id: 3 }\n            ];\n            await this.saveToFile('users.json', defaultUsers);\n        }\n\n        try {\n            await fetch('/comments.json');\n        } catch {\n            await this.saveToFile('comments.json', []);\n        }\n\n        try {\n            await fetch('/requests.json');\n        } catch {\n            await this.saveToFile('requests.json', []);\n        }\n\n        // Keep these in localStorage as they're UI settings\n        if (!localStorage.getItem('announcement')) {\n            localStorage.setItem('announcement', '');\n        }\n\n        if (!localStorage.getItem('maintenance')) {\n            localStorage.setItem('maintenance', JSON.stringify({ enabled: false, message: '' }));\n        }\n    }\n\n    async loadFromFile(filename) {\n        try {\n            const response = await fetch(`/${filename}`);\n            return await response.json();\n        } catch {\n            return [];\n        }\n    }\n\n    async saveToFile(filename, data) {\n        try {\n            const response = await fetch(`/save-${filename}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data)\n            });\n            return response.ok;\n        } catch {\n            // Fallback to localStorage for development\n            localStorage.setItem(filename.replace('.json', ''), JSON.stringify(data));\n            return true;\n        }\n    }\n\n\n    loadCurrentUser() {\n        const userData = localStorage.getItem('current_user');\n        if (userData) {\n            this.currentUser = JSON.parse(userData);\n            this.updateUIForUser();\n        }\n    }\n\n    updateUIForUser() {\n        const loginBtn = document.getElementById('login-btn');\n        const registerBtn = document.getElementById('register-btn');\n        const logoutBtn = document.getElementById('logout-btn');\n        const userInfo = document.getElementById('user-info');\n\n        if (this.currentUser) {\n            loginBtn.style.display = 'none';\n            registerBtn.style.display = 'none';\n            logoutBtn.style.display = 'block';\n            userInfo.style.display = 'block';\n            userInfo.textContent = `${this.currentUser.username} (${this.currentUser.role})`;\n\n            document.querySelectorAll('.admin-only').forEach(el => {\n                el.style.display = this.currentUser.role === 'admin' ? 'block' : 'none';\n            });\n\n            document.querySelectorAll('.gameadder-only').forEach(el => {\n                el.style.display = ['admin', 'gameadder'].includes(this.currentUser.role) ? 'block' : 'none';\n            });\n        } else {\n            loginBtn.style.display = 'block';\n            registerBtn.style.display = 'block';\n            logoutBtn.style.display = 'none';\n            userInfo.style.display = 'none';\n\n            document.querySelectorAll('.admin-only, .gameadder-only').forEach(el => {\n                el.style.display = 'none';\n            });\n        }\n\n        this.checkMaintenance();\n        this.showAnnouncement();\n    }\n\n    checkMaintenance() {\n        const maintenance = JSON.parse(localStorage.getItem('maintenance'));\n        const banner = document.getElementById('maintenance-banner');\n        const text = document.getElementById('maintenance-text');\n\n        if (maintenance.enabled && (!this.currentUser || this.currentUser.role !== 'admin')) {\n            banner.style.display = 'block';\n            text.textContent = maintenance.message || 'Site is under maintenance';\n        } else {\n            banner.style.display = 'none';\n        }\n    }\n\n    showAnnouncement() {\n        const announcement = localStorage.getItem('announcement');\n        const banner = document.getElementById('announcement-banner');\n        const text = document.getElementById('announcement-text');\n\n        if (announcement) {\n            banner.style.display = 'block';\n            text.textContent = announcement;\n        }\n    }\n\n    setupEventListeners() {\n        document.getElementById('login-btn').addEventListener('click', () => this.openModal('login-modal'));\n        document.getElementById('register-btn').addEventListener('click', () => this.openModal('register-modal'));\n        document.getElementById('logout-btn').addEventListener('click', () => this.logout());\n\n        document.querySelectorAll('.modal-close').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const modal = e.target.closest('.modal');\n                modal.classList.remove('active');\n                \n                // If we're closing the game modal and we're on game-list.html, \n                // ensure we stay on the games page\n                if (modal.id === 'game-modal' && window.location.pathname.includes('game-list.html')) {\n                    // Keep the games page visible\n                    const gamesPageMain = document.querySelector('.games-page-main');\n                    if (gamesPageMain) gamesPageMain.style.display = 'block';\n                }\n            });\n        });\n\n        const closeBtn = document.getElementById('close-announcement');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => {\n                document.getElementById('announcement-banner').style.display = 'none';\n            });\n        }\n\n        document.querySelectorAll('.nav-link').forEach(link => {\n            link.addEventListener('click', (e) => {\n                const page = e.target.dataset.page;\n                if (page) {\n                    e.preventDefault();\n                    this.navigateTo(page);\n                }\n            });\n        });\n\n        document.getElementById('login-form').addEventListener('submit', (e) => this.handleLogin(e));\n        document.getElementById('register-form').addEventListener('submit', (e) => this.handleRegister(e));\n        \n        const addGameForm = document.getElementById('add-game-form');\n        if (addGameForm) {\n            addGameForm.addEventListener('submit', (e) => this.handleAddGame(e));\n        }\n\n        const requestForm = document.getElementById('request-form');\n        if (requestForm) {\n            requestForm.addEventListener('submit', (e) => this.handleRequest(e));\n        }\n\n        document.querySelectorAll('.admin-tab').forEach(tab => {\n            tab.addEventListener('click', (e) => this.switchAdminTab(e.target.dataset.tab));\n        });\n\n        const saveAnnouncementBtn = document.getElementById('save-announcement');\n        if (saveAnnouncementBtn) {\n            saveAnnouncementBtn.addEventListener('click', () => this.saveAnnouncement());\n        }\n\n        const clearAnnouncementBtn = document.getElementById('clear-announcement');\n        if (clearAnnouncementBtn) {\n            clearAnnouncementBtn.addEventListener('click', () => this.clearAnnouncement());\n        }\n\n        const saveMaintenanceBtn = document.getElementById('save-maintenance');\n        if (saveMaintenanceBtn) {\n            saveMaintenanceBtn.addEventListener('click', () => this.saveMaintenance());\n        }\n\n        const searchGames = document.getElementById('search-games');\n        if (searchGames) {\n            searchGames.addEventListener('input', (e) => this.searchGames(e.target.value));\n            searchGames.addEventListener('click', (e) => e.stopPropagation());\n        }\n\n        const filterGenre = document.getElementById('filter-genre');\n        if (filterGenre) {\n            filterGenre.addEventListener('change', (e) => this.filterGames(e.target.value));\n            filterGenre.addEventListener('click', (e) => e.stopPropagation());\n        }\n    }\n\n    openModal(modalId) {\n        document.getElementById(modalId).classList.add('active');\n    }\n\n    handleLogin(e) {\n        e.preventDefault();\n        const username = document.getElementById('login-username').value;\n        const password = document.getElementById('login-password').value;\n\n        const users = JSON.parse(localStorage.getItem('users'));\n        const user = users.find(u => u.username === username && u.password === password);\n\n        if (user) {\n            this.currentUser = user;\n            localStorage.setItem('current_user', JSON.stringify(user));\n            document.getElementById('login-modal').classList.remove('active');\n            this.updateUIForUser();\n            this.renderPage();\n            alert('Login successful!');\n        } else {\n            alert('Invalid credentials!');\n        }\n    }\n\n    handleRegister(e) {\n        e.preventDefault();\n        const username = document.getElementById('register-username').value;\n        const password = document.getElementById('register-password').value;\n        const confirm = document.getElementById('register-confirm').value;\n\n        if (password !== confirm) {\n            alert('Passwords do not match!');\n            return;\n        }\n\n        const users = JSON.parse(localStorage.getItem('users'));\n        \n        if (users.find(u => u.username === username)) {\n            alert('Username already exists!');\n            return;\n        }\n\n        const newUser = {\n            username,\n            password,\n            role: 'basic',\n            id: Date.now()\n        };\n\n        users.push(newUser);\n        localStorage.setItem('users', JSON.stringify(users));\n\n        this.currentUser = newUser;\n        localStorage.setItem('current_user', JSON.stringify(newUser));\n        document.getElementById('register-modal').classList.remove('active');\n        this.updateUIForUser();\n        alert('Registration successful!');\n        document.getElementById('register-form').reset();\n    }\n\n    logout() {\n        this.currentUser = null;\n        localStorage.removeItem('current_user');\n        this.updateUIForUser();\n        this.navigateTo('home');\n        alert('Logged out successfully!');\n    }\n\n    navigateTo(page) {\n        this.currentPage = page;\n        \n        // Hide the landing page\n        const landingPage = document.querySelector('.landing-page');\n        if (landingPage) landingPage.style.display = 'none';\n        \n        // Hide any games page content\n        const gamesPageMain = document.querySelector('.games-page-main');\n        if (gamesPageMain) gamesPageMain.style.display = 'none';\n        \n        // Remove active class from all pages and nav links\n        document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));\n        document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));\n\n        // Show the target page\n        const targetPage = document.getElementById(`${page}-page`);\n        if (targetPage) {\n            targetPage.classList.add('active');\n            // Add active class to the corresponding nav link\n            const navLink = document.querySelector(`[data-page=\"${page}\"]`);\n            if (navLink) {\n                navLink.classList.add('active');\n            }\n            this.renderPage();\n        }\n    }\n\n    renderPage() {\n        const gamesGrid = document.getElementById('games-grid');\n        if (gamesGrid) {\n            const games = JSON.parse(localStorage.getItem('games'));\n            this.renderGameGrid(games, 'games-grid');\n            this.populateGenreFilter();\n        }\n\n        const requestsPage = document.getElementById('requests-page');\n        if (requestsPage && requestsPage.classList.contains('active')) {\n            this.renderRequestsPage();\n        }\n\n        const adminPage = document.getElementById('admin-page');\n        if (adminPage && adminPage.classList.contains('active')) {\n            this.renderAdminPage();\n        }\n    }\n\n    renderGameGrid(games, containerId) {\n        const container = document.getElementById(containerId);\n        \n        if (games.length === 0) {\n            container.innerHTML = '<p style=\"color: white; text-align: center; grid-column: 1/-1;\">No games available yet.</p>';\n            return;\n        }\n\n        container.innerHTML = games.map(game => `\n            <div class=\"game-card\" data-game-id=\"${game.id}\">\n                <img src=\"${game.image}\" alt=\"${game.title}\" class=\"game-image\" onerror=\"this.src='https://via.placeholder.com/300x200?text=No+Image'\">\n                <div class=\"game-content\">\n                    <h3 class=\"game-title\">${game.title}</h3>\n                    <div class=\"game-meta\">\n                        <span>⭐ ${game.rating || 'N/A'}</span>\n                        <span>📅 ${new Date(game.releaseDate).getFullYear()}</span>\n                    </div>\n                    <p class=\"game-description\">${game.shortDescription}</p>\n                    <div class=\"game-tags\">\n                        ${game.tags ? game.tags.split(',').map(tag => `<span class=\"tag\">${tag.trim()}</span>`).join('') : ''}\n                    </div>\n                </div>\n            </div>\n        `).join('');\n\n        container.querySelectorAll('.game-card').forEach(card => {\n            card.addEventListener('click', () => {\n                const gameId = parseInt(card.dataset.gameId);\n                this.showGameDetail(gameId);\n            });\n        });\n    }\n\n    populateGenreFilter() {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const genres = [...new Set(games.map(g => g.genre))];\n        const select = document.getElementById('filter-genre');\n        \n        if (select) {\n            select.innerHTML = '<option value=\"\">All Genres</option>' + \n                genres.map(g => `<option value=\"${g}\">${g}</option>`).join('');\n        }\n    }\n\n    searchGames(query) {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const filtered = games.filter(g => \n            g.title.toLowerCase().includes(query.toLowerCase()) ||\n            g.shortDescription.toLowerCase().includes(query.toLowerCase())\n        );\n        this.renderGameGrid(filtered, 'games-grid');\n    }\n\n    filterGames(genre) {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const filtered = genre ? games.filter(g => g.genre === genre) : games;\n        this.renderGameGrid(filtered, 'games-grid');\n    }\n\n    showGameDetail(gameId) {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const game = games.find(g => g.id === gameId);\n        this.currentGameId = gameId;\n\n        if (!game) return;\n\n        // Hide games page main when opening modal\n        const gamesPageMain = document.querySelector('.games-page-main');\n        if (gamesPageMain && window.location.pathname.includes('game-list.html')) {\n            gamesPageMain.style.display = 'none';\n        }\n\n        const modal = document.getElementById('game-modal');\n        const detail = document.getElementById('game-detail');\n\n        detail.innerHTML = `\n            <div class=\"game-detail-header\">\n                <img src=\"${game.image}\" alt=\"${game.title}\" class=\"game-detail-image\" onerror=\"this.src='https://via.placeholder.com/300x400?text=No+Image'\">\n                <div class=\"game-detail-info\">\n                    <h2>${game.title}</h2>\n                    <div class=\"game-detail-meta\">\n                        <span class=\"meta-item\">⭐ ${game.rating || 'N/A'}</span>\n                        <span class=\"meta-item\">🎮 ${game.genre}</span>\n                        <span class=\"meta-item\">📅 ${new Date(game.releaseDate).toLocaleDateString()}</span>\n                        <span class=\"meta-item\">💪 ${game.difficulty}</span>\n                    </div>\n                    <p><strong>Developer:</strong> ${game.developer}</p>\n                    <p><strong>Publisher:</strong> ${game.publisher}</p>\n                    <p><strong>File Size:</strong> ${game.fileSize}</p>\n                    ${this.currentUser && this.currentUser.role === 'admin' ? `\n                        <button class=\"btn btn-danger btn-sm\" onclick=\"app.deleteGame(${game.id})\">Delete Game</button>\n                    ` : ''}\n                </div>\n            </div>\n\n            <div class=\"game-detail-section\">\n                <h3>Description</h3>\n                <p>${game.fullDescription}</p>\n            </div>\n\n            ${game.requirements ? `\n                <div class=\"game-detail-section\">\n                    <h3>System Requirements</h3>\n                    <pre>${game.requirements}</pre>\n                </div>\n            ` : ''}\n\n            ${game.notes ? `\n                <div class=\"game-detail-section\">\n                    <h3>Additional Notes</h3>\n                    <p>${game.notes}</p>\n                </div>\n            ` : ''}\n\n            <div class=\"game-detail-section\">\n                <a href=\"${game.downloadLink}\" target=\"_blank\" class=\"btn btn-primary btn-lg\">Download Game</a>\n            </div>\n\n            <div class=\"comments-section\">\n                <h3>Comments</h3>\n                ${this.currentUser ? `\n                    <form class=\"comment-form\" onsubmit=\"app.addComment(event)\">\n                        <div class=\"form-group\">\n                            <textarea id=\"comment-text\" rows=\"3\" placeholder=\"Write a comment...\" required></textarea>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-primary\">Post Comment</button>\n                    </form>\n                ` : '<p>Please login to comment.</p>'}\n                <div id=\"comments-list\"></div>\n            </div>\n        `;\n\n        modal.classList.add('active');\n        this.renderComments(gameId);\n    }\n\n    renderComments(gameId) {\n        const comments = JSON.parse(localStorage.getItem('comments'));\n        const gameComments = comments.filter(c => c.gameId === gameId);\n        const container = document.getElementById('comments-list');\n\n        if (gameComments.length === 0) {\n            container.innerHTML = '<p style=\"color: #64748b; margin-top: 1rem;\">No comments yet.</p>';\n            return;\n        }\n\n        container.innerHTML = gameComments.map(comment => `\n            <div class=\"comment\">\n                <div class=\"comment-header\">\n                    <div>\n                        <span class=\"comment-author\">${comment.author}</span>\n                        <span class=\"role-badge badge-${comment.role}\">${comment.role}</span>\n                    </div>\n                    <small style=\"color: #64748b;\">${new Date(comment.timestamp).toLocaleString()}</small>\n                </div>\n                <p>${comment.text}</p>\n                <div class=\"comment-actions\">\n                    <button class=\"comment-action\" onclick=\"app.toggleLike(${comment.id})\">\n                        ${comment.likes?.includes(this.currentUser?.username) ? '❤️ Unlike' : '🤍 Like'}\n                    </button>\n                    <span class=\"comment-likes\">${comment.likes?.length || 0} likes</span>\n                    ${this.currentUser && (this.currentUser.username === comment.author || this.currentUser.role === 'admin') ? `\n                        <button class=\"comment-action\" onclick=\"app.deleteComment(${comment.id})\">🗑️ Delete</button>\n                    ` : ''}\n                </div>\n            </div>\n        `).join('');\n    }\n\n    addComment(e) {\n        e.preventDefault();\n        if (!this.currentUser) return;\n\n        const text = document.getElementById('comment-text').value;\n        const comments = JSON.parse(localStorage.getItem('comments'));\n\n        const newComment = {\n            id: Date.now(),\n            gameId: this.currentGameId,\n            author: this.currentUser.username,\n            role: this.currentUser.role,\n            text,\n            timestamp: new Date().toISOString(),\n            likes: []\n        };\n\n        comments.push(newComment);\n        localStorage.setItem('comments', JSON.stringify(comments));\n        \n        document.getElementById('comment-text').value = '';\n        this.renderComments(this.currentGameId);\n        this.updateStats();\n    }\n\n    toggleLike(commentId) {\n        if (!this.currentUser) return;\n\n        const comments = JSON.parse(localStorage.getItem('comments'));\n        const comment = comments.find(c => c.id === commentId);\n\n        if (!comment.likes) comment.likes = [];\n\n        const index = comment.likes.indexOf(this.currentUser.username);\n        if (index > -1) {\n            comment.likes.splice(index, 1);\n        } else {\n            comment.likes.push(this.currentUser.username);\n        }\n\n        localStorage.setItem('comments', JSON.stringify(comments));\n        this.renderComments(this.currentGameId);\n    }\n\n    deleteComment(commentId) {\n        if (!confirm('Delete this comment?')) return;\n\n        const comments = JSON.parse(localStorage.getItem('comments'));\n        const filtered = comments.filter(c => c.id !== commentId);\n        localStorage.setItem('comments', JSON.stringify(filtered));\n        this.renderComments(this.currentGameId);\n        this.updateStats();\n    }\n\n    handleAddGame(e) {\n        e.preventDefault();\n\n        const game = {\n            id: Date.now(),\n            title: document.getElementById('game-title').value,\n            developer: document.getElementById('game-developer').value,\n            publisher: document.getElementById('game-publisher').value,\n            releaseDate: document.getElementById('game-release-date').value,\n            shortDescription: document.getElementById('game-short-desc').value,\n            fullDescription: document.getElementById('game-full-desc').value,\n            genre: document.getElementById('game-genre').value,\n            tags: document.getElementById('game-tags').value,\n            rating: document.getElementById('game-rating').value,\n            difficulty: document.getElementById('game-difficulty').value,\n            image: document.getElementById('game-image').value,\n            downloadLink: document.getElementById('game-download').value,\n            fileSize: document.getElementById('game-file-size').value,\n            requirements: document.getElementById('game-requirements').value,\n            notes: document.getElementById('game-notes').value,\n            addedBy: this.currentUser.username,\n            timestamp: new Date().toISOString()\n        };\n\n        const games = JSON.parse(localStorage.getItem('games'));\n        games.push(game);\n        localStorage.setItem('games', JSON.stringify(games));\n\n        alert('Game added successfully!');\n        document.getElementById('add-game-form').reset();\n        this.updateStats();\n    }\n\n    deleteGame(gameId) {\n        if (!confirm('Delete this game? This will also delete all comments.')) return;\n\n        const games = JSON.parse(localStorage.getItem('games'));\n        const filtered = games.filter(g => g.id !== gameId);\n        localStorage.setItem('games', JSON.stringify(filtered));\n\n        const comments = JSON.parse(localStorage.getItem('comments'));\n        const filteredComments = comments.filter(c => c.gameId !== gameId);\n        localStorage.setItem('comments', JSON.stringify(filteredComments));\n\n        document.getElementById('game-modal').classList.remove('active');\n        this.renderPage();\n        this.updateStats();\n        alert('Game deleted!');\n    }\n\n    handleRequest(e) {\n        e.preventDefault();\n        if (!this.currentUser) {\n            alert('Please login to submit requests!');\n            return;\n        }\n\n        const request = {\n            id: Date.now(),\n            steamId: document.getElementById('request-steam-id').value,\n            gameName: document.getElementById('request-game-name').value,\n            notes: document.getElementById('request-notes').value,\n            username: this.currentUser.username,\n            status: 'pending',\n            timestamp: new Date().toISOString()\n        };\n\n        const requests = JSON.parse(localStorage.getItem('requests'));\n        requests.push(request);\n        localStorage.setItem('requests', JSON.stringify(requests));\n\n        alert('Request submitted!');\n        document.getElementById('request-form').reset();\n        this.renderRequestsPage();\n    }\n\n    renderRequestsPage() {\n        if (!this.currentUser) {\n            document.getElementById('user-requests').innerHTML = '<p>Please login to view your requests.</p>';\n            return;\n        }\n\n        const requests = JSON.parse(localStorage.getItem('requests'));\n        const userRequests = requests.filter(r => r.username === this.currentUser.username);\n        const container = document.getElementById('user-requests');\n\n        if (userRequests.length === 0) {\n            container.innerHTML = '<p>No requests yet.</p>';\n            return;\n        }\n\n        container.innerHTML = userRequests.map(req => `\n            <div class=\"request-item\">\n                <div class=\"request-header\">\n                    <div>\n                        <h4>${req.gameName}</h4>\n                        <p>Steam ID: ${req.steamId}</p>\n                        ${req.notes ? `<p>${req.notes}</p>` : ''}\n                    </div>\n                    <span class=\"request-status status-${req.status}\">${req.status.toUpperCase()}</span>\n                </div>\n                <small style=\"color: #64748b;\">Submitted: ${new Date(req.timestamp).toLocaleString()}</small>\n            </div>\n        `).join('');\n    }\n\n    renderAdminPage() {\n        this.renderAdminUsers();\n        this.renderAdminGames();\n        this.renderAdminRequests();\n        this.loadAdminSettings();\n    }\n\n    switchAdminTab(tab) {\n        document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));\n        document.querySelectorAll('.admin-section').forEach(s => s.classList.remove('active'));\n\n        document.querySelector(`[data-tab=\"${tab}\"]`).classList.add('active');\n        document.getElementById(`admin-${tab}`).classList.add('active');\n    }\n\n    renderAdminUsers() {\n        const users = JSON.parse(localStorage.getItem('users'));\n        const container = document.getElementById('users-table');\n\n        container.innerHTML = users.map(user => `\n            <div class=\"table-row\">\n                <div>${user.username}</div>\n                <div><span class=\"role-badge badge-${user.role}\">${user.role}</span></div>\n                <div>ID: ${user.id}</div>\n                <div class=\"table-actions\">\n                    <select onchange=\"app.changeUserRole(${user.id}, this.value)\">\n                        <option value=\"basic\" ${user.role === 'basic' ? 'selected' : ''}>Basic</option>\n                        <option value=\"gameadder\" ${user.role === 'gameadder' ? 'selected' : ''}>Gameadder</option>\n                        <option value=\"admin\" ${user.role === 'admin' ? 'selected' : ''}>Admin</option>\n                    </select>\n                    <button class=\"btn btn-danger btn-sm\" onclick=\"app.deleteUser(${user.id})\">Delete</button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    changeUserRole(userId, newRole) {\n        const users = JSON.parse(localStorage.getItem('users'));\n        const user = users.find(u => u.id === userId);\n        user.role = newRole;\n        localStorage.setItem('users', JSON.stringify(users));\n        alert('Role updated!');\n    }\n\n    deleteUser(userId) {\n        if (!confirm('Delete this user?')) return;\n\n        const users = JSON.parse(localStorage.getItem('users'));\n        const filtered = users.filter(u => u.id !== userId);\n        localStorage.setItem('users', JSON.stringify(filtered));\n        this.renderAdminUsers();\n        this.updateStats();\n        alert('User deleted!');\n    }\n\n    renderAdminGames() {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const container = document.getElementById('admin-games-table');\n\n        if (games.length === 0) {\n            container.innerHTML = '<p>No games yet.</p>';\n            return;\n        }\n\n        container.innerHTML = games.map(game => `\n            <div class=\"table-row\">\n                <div>${game.title}</div>\n                <div>${game.genre}</div>\n                <div>By: ${game.addedBy}</div>\n                <div class=\"table-actions\">\n                    <button class=\"btn btn-danger btn-sm\" onclick=\"app.deleteGameAdmin(${game.id})\">Delete</button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    deleteGameAdmin(gameId) {\n        this.deleteGame(gameId);\n        this.renderAdminGames();\n    }\n\n    renderAdminRequests() {\n        const requests = JSON.parse(localStorage.getItem('requests'));\n        const container = document.getElementById('admin-requests-table');\n\n        if (requests.length === 0) {\n            container.innerHTML = '<p>No requests yet.</p>';\n            return;\n        }\n\n        container.innerHTML = requests.map(req => `\n            <div class=\"table-row\">\n                <div>\n                    <strong>${req.gameName}</strong><br>\n                    Steam ID: ${req.steamId}<br>\n                    By: ${req.username}\n                </div>\n                <div><span class=\"request-status status-${req.status}\">${req.status}</span></div>\n                <div>${new Date(req.timestamp).toLocaleDateString()}</div>\n                <div class=\"table-actions\">\n                    ${req.status === 'pending' ? `\n                        <button class=\"btn btn-success btn-sm\" onclick=\"app.updateRequestStatus(${req.id}, 'approved')\">Approve</button>\n                        <button class=\"btn btn-danger btn-sm\" onclick=\"app.updateRequestStatus(${req.id}, 'rejected')\">Reject</button>\n                    ` : ''}\n                    <button class=\"btn btn-danger btn-sm\" onclick=\"app.deleteRequest(${req.id})\">Delete</button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    updateRequestStatus(requestId, status) {\n        const requests = JSON.parse(localStorage.getItem('requests'));\n        const request = requests.find(r => r.id === requestId);\n        request.status = status;\n        localStorage.setItem('requests', JSON.stringify(requests));\n        this.renderAdminRequests();\n        alert(`Request ${status}!`);\n    }\n\n    deleteRequest(requestId) {\n        if (!confirm('Delete this request?')) return;\n\n        const requests = JSON.parse(localStorage.getItem('requests'));\n        const filtered = requests.filter(r => r.id !== requestId);\n        localStorage.setItem('requests', JSON.stringify(filtered));\n        this.renderAdminRequests();\n        alert('Request deleted!');\n    }\n\n    loadAdminSettings() {\n        const announcement = localStorage.getItem('announcement');\n        document.getElementById('announcement-input').value = announcement;\n\n        const maintenance = JSON.parse(localStorage.getItem('maintenance'));\n        document.getElementById('maintenance-toggle').checked = maintenance.enabled;\n        document.getElementById('maintenance-message').value = maintenance.message;\n    }\n\n    saveAnnouncement() {\n        const text = document.getElementById('announcement-input').value;\n        localStorage.setItem('announcement', text);\n        this.showAnnouncement();\n        alert('Announcement saved!');\n    }\n\n    clearAnnouncement() {\n        localStorage.setItem('announcement', '');\n        document.getElementById('announcement-input').value = '';\n        document.getElementById('announcement-banner').style.display = 'none';\n        alert('Announcement cleared!');\n    }\n\n    saveMaintenance() {\n        const enabled = document.getElementById('maintenance-toggle').checked;\n        const message = document.getElementById('maintenance-message').value;\n        \n        localStorage.setItem('maintenance', JSON.stringify({ enabled, message }));\n        this.checkMaintenance();\n        alert('Maintenance settings saved!');\n    }\n\n    updateStats() {\n        const games = JSON.parse(localStorage.getItem('games'));\n        const users = JSON.parse(localStorage.getItem('users'));\n        const comments = JSON.parse(localStorage.getItem('comments'));\n\n        const totalGames = document.getElementById('total-games');\n        const totalUsers = document.getElementById('total-users');\n        const totalComments = document.getElementById('total-comments');\n\n        if (totalGames) totalGames.textContent = games.length;\n        if (totalUsers) totalUsers.textContent = users.length;\n        if (totalComments) totalComments.textContent = comments.length;\n    }\n}\n\nconst app = new SteamtoolsApp();\n","size_bytes":33294},"replit.md":{"content":"# Steamtools - Gaming Platform\n\n## Overview\n\nSteamtools is a web-based gaming platform designed for sharing and managing Lua scripts and manifest files. The application provides a comprehensive system for game cataloging, user management, community interaction through comments, and administrative controls. Built as a single-page application with multiple HTML files, it uses client-side storage and role-based access control to manage content and user permissions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack**\n- Pure vanilla JavaScript (no frameworks)\n- HTML5 with multiple static pages (index.html, game-list.html)\n- CSS3 with custom properties for theming\n- Client-side routing handled through JavaScript\n\n**Design Pattern**\n- Class-based application structure (SteamtoolsApp)\n- Single responsibility principle with separate HTML pages for different views\n- Event-driven architecture for user interactions\n- Modal-based UI for detailed views and forms\n\n**State Management**\n- LocalStorage as the primary data persistence layer\n- In-memory state for current user session\n- Page-based navigation state tracking\n\n**Rationale**: Vanilla JavaScript chosen for simplicity and zero build-time requirements. LocalStorage provides immediate persistence without backend complexity, suitable for a demo/prototype application.\n\n### Data Architecture\n\n**Storage Model**\n- Client-side only using browser LocalStorage\n- No backend server or database\n- JSON serialization for all data structures\n\n**Data Entities**\n1. **Users**: Authentication credentials, roles (basic/gameadder/admin), user IDs\n2. **Games**: Comprehensive metadata including title, descriptions, images, download links, system requirements, verification status\n3. **Comments**: User-generated content with like counts, associations to games and users\n4. **Requests**: User game requests with Steam IDs and approval status\n5. **Announcements**: System-wide messages displayed in banners\n6. **Maintenance**: Mode toggle with custom messages\n\n**Pre-seeded Data**: Three admin accounts hardcoded for initial access (jupiter, khaedus, malte)\n\n**Limitations**: LocalStorage has ~5-10MB limits and data is browser-specific. No multi-device sync or server-side validation.\n\n### Authentication & Authorization\n\n**Authentication Method**\n- Custom username/password authentication\n- Credentials stored in LocalStorage (plaintext)\n- Session managed via current_user in LocalStorage\n\n**Authorization Model**\n- Role-Based Access Control (RBAC) with three tiers:\n  - **Basic**: View games, comment, request games\n  - **Gameadder**: All basic permissions + add new games\n  - **Admin**: Full control including user management, request approval, announcements, maintenance mode\n\n**UI Permission Enforcement**\n- Conditional rendering of navigation links based on roles (.admin-only, .gameadder-only classes)\n- Client-side permission checks before executing privileged actions\n\n**Security Considerations**: No encryption, no server-side validation, vulnerable to client-side manipulation. Suitable only for trusted environments or demo purposes.\n\n### Feature Modules\n\n**Game Management System**\n- Multi-field upload form with extensive metadata capture\n- Image upload supporting both drag-and-drop and URL input\n- Game library with search and genre filtering\n- Expandable card UI with \"Show More\" descriptions\n- Detail modal displaying full game information\n- Role-based delete functionality\n\n**Comment System**\n- Per-game threaded comments\n- Emoji support in comment text\n- Like/unlike with persistence\n- Edit/delete with ownership validation\n- Sort functionality (newest/oldest)\n- Visual role badges (admin/gameadder)\n\n**Request System**\n- User-submitted game requests with Steam ID\n- Admin approval workflow (approve/reject/delete)\n- Mandatory external link redirections (online-fix.me, Discord)\n\n**Admin Panel**\n- User role management and deletion\n- Game moderation and removal\n- Request queue management\n- Announcement banner with dismissible UI\n- Maintenance mode with custom messaging\n\n### UI/UX Architecture\n\n**Visual Theme**\n- CSS custom properties for consistent theming\n- Minimal flat design with black background (#0a0a0a, #1a1a1a)\n- Orange accent color (#ff6b35) for interactive elements\n- Clean borders (no shadows or gradients)\n- Modern card-based layouts with simple hover effects\n- Responsive design principles\n- Modal overlays for detailed interactions\n\n**Navigation Structure**\n- Static navbar across all pages\n- Multi-page architecture (index.html for landing, game-list.html for library)\n- Hash-based navigation for certain views (#requests, #admin)\n- Breadcrumb-style active state indicators\n\n**Component Patterns**\n- Reusable banner components (announcement, maintenance)\n- Modal dialogs for forms and detailed views\n- Filter/search controls for content discovery\n- Role-specific UI element visibility\n\n## External Dependencies\n\n**Browser APIs**\n- LocalStorage API for all data persistence\n- File API for image drag-and-drop upload\n- DOM API for all UI rendering and manipulation\n\n**External Links (Required Redirects)**\n- Online-fix.me: https://online-fix.me (for online gaming modifications)\n- Discord Community: https://discord.gg/363dDzJFSv\n\n**No External Libraries**: The application is built entirely with native browser capabilities, requiring no npm packages, CDN imports, or third-party JavaScript libraries.\n\n**Asset Requirements**\n- User-uploaded game images (stored as base64 or URLs)\n- Emoji support relies on system fonts\n\n**Deployment Constraints**\n- Static hosting compatible (no server-side processing needed)\n- Works entirely in-browser with no build step\n- Cross-browser compatibility depends on LocalStorage and modern JavaScript support","size_bytes":5825},"styles.css":{"content":"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --primary: #ff6b35;\n    --primary-dark: #e55a2b;\n    --secondary: #ff8c42;\n    --success: #10b981;\n    --danger: #ef4444;\n    --warning: #f59e0b;\n    --dark: #1a1a1a;\n    --darker: #0a0a0a;\n    --light: #f5f5f5;\n    --gray: #888;\n    --border: #333;\n    --shadow: rgba(0, 0, 0, 0.3);\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    background: #0a0a0a;\n    min-height: 100vh;\n    color: #fff;\n    line-height: 1.6;\n}\n\n.landing-page {\n    min-height: calc(100vh - 100px);\n}\n\n.hero-landing {\n    min-height: 80vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    padding: 4rem 2rem;\n}\n\n.hero-content {\n    max-width: 900px;\n}\n\n.hero-title-big {\n    font-size: 5rem;\n    font-weight: 900;\n    color: white;\n    margin-bottom: 1.5rem;\n    letter-spacing: -2px;\n}\n\n.hero-subtitle-big {\n    font-size: 1.8rem;\n    color: rgba(255, 255, 255, 0.9);\n    margin-bottom: 3rem;\n    font-weight: 400;\n}\n\n.hero-buttons {\n    display: flex;\n    gap: 1.5rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.btn-hero {\n    padding: 1.2rem 3rem;\n    font-size: 1.1rem;\n    text-decoration: none;\n    display: inline-block;\n    border-radius: 4px;\n    font-weight: 700;\n    transition: all 0.2s;\n}\n\n.btn-hero:hover {\n    opacity: 0.9;\n}\n\n.stats-section {\n    background: #0a0a0a;\n    padding: 4rem 2rem;\n    border-top: 1px solid var(--border);\n    border-bottom: 1px solid var(--border);\n}\n\n.stats-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 3rem;\n}\n\n.stat-box {\n    background: #1a1a1a;\n    padding: 3rem 2rem;\n    border-radius: 8px;\n    text-align: center;\n    border: 1px solid var(--border);\n    transition: border-color 0.3s;\n}\n\n.stat-box:hover {\n    border-color: var(--primary);\n}\n\n.stat-icon {\n    font-size: 3.5rem;\n    margin-bottom: 1rem;\n}\n\n.stat-number {\n    font-size: 3.5rem;\n    font-weight: 900;\n    color: var(--primary);\n    margin-bottom: 0.5rem;\n}\n\n.stat-label {\n    font-size: 1.1rem;\n    color: var(--gray);\n    font-weight: 500;\n}\n\n.features-section {\n    padding: 6rem 2rem;\n    max-width: 1400px;\n    margin: 0 auto;\n}\n\n.section-title {\n    text-align: center;\n    font-size: 3rem;\n    color: white;\n    margin-bottom: 4rem;\n    font-weight: 700;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 2.5rem;\n}\n\n.feature-card {\n    background: #1a1a1a;\n    padding: 3rem 2rem;\n    border-radius: 8px;\n    text-align: center;\n    border: 1px solid var(--border);\n    transition: border-color 0.3s;\n}\n\n.feature-card:hover {\n    border-color: var(--primary);\n}\n\n.feature-icon {\n    font-size: 4rem;\n    margin-bottom: 1.5rem;\n}\n\n.feature-card h3 {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    color: #fff;\n}\n\n.feature-card p {\n    color: #aaa;\n    font-size: 1rem;\n    line-height: 1.6;\n}\n\n.games-page-main {\n    min-height: 100vh;\n    padding: 3rem 0;\n}\n\n.page-container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 2rem;\n}\n\n.page-title {\n    color: white;\n    font-size: 3rem;\n    margin-bottom: 2rem;\n}\n\n.maintenance-banner,\n.announcement-banner {\n    background: var(--warning);\n    color: white;\n    padding: 15px;\n    text-align: center;\n    font-weight: 500;\n    position: relative;\n}\n\n.maintenance-banner {\n    background: var(--danger);\n}\n\n.close-banner {\n    position: absolute;\n    right: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: white;\n    font-size: 24px;\n    cursor: pointer;\n    padding: 0 10px;\n}\n\n.navbar {\n    background: #1a1a1a;\n    border-bottom: 2px solid var(--primary);\n    position: sticky;\n    top: 0;\n    z-index: 100;\n}\n\n.nav-container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 1rem 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 2rem;\n}\n\n.nav-brand h1 {\n    font-size: 1.5rem;\n    color: var(--primary);\n    font-weight: 700;\n    letter-spacing: 1px;\n}\n\n.nav-links {\n    display: flex;\n    gap: 2rem;\n    flex: 1;\n}\n\n.nav-link {\n    text-decoration: none;\n    color: #aaa;\n    font-weight: 500;\n    transition: all 0.3s;\n    padding: 0.5rem 1rem;\n    border-radius: 4px;\n}\n\n.nav-link:hover {\n    color: var(--primary);\n}\n\n.nav-link.active {\n    color: var(--primary);\n    background: rgba(255, 107, 53, 0.1);\n}\n\n.nav-auth {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n}\n\n.user-info {\n    font-weight: 600;\n    color: #fff;\n    padding: 0.5rem 1rem;\n    background: #222;\n    border-radius: 4px;\n    border: 1px solid var(--border);\n}\n\n.btn {\n    padding: 0.6rem 1.5rem;\n    border: none;\n    border-radius: 4px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    font-size: 14px;\n}\n\n.btn-primary {\n    background: var(--primary);\n    color: white;\n}\n\n.btn-primary:hover {\n    background: var(--primary-dark);\n}\n\n.btn-secondary {\n    background: transparent;\n    color: var(--primary);\n    border: 2px solid var(--primary);\n}\n\n.btn-secondary:hover {\n    background: var(--primary);\n    color: white;\n}\n\n.btn-danger {\n    background: var(--danger);\n    color: white;\n}\n\n.btn-danger:hover {\n    background: #dc2626;\n}\n\n.btn-success {\n    background: var(--success);\n    color: white;\n}\n\n.btn-block {\n    width: 100%;\n}\n\n.btn-lg {\n    padding: 1rem 2rem;\n    font-size: 16px;\n}\n\n.main-content {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.page {\n    display: none;\n    min-height: calc(100vh - 80px);\n    padding-top: 2rem;\n}\n\n.page.active {\n    display: block;\n    animation: fadeIn 0.3s;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.page-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 2rem;\n}\n\n.page-header {\n    text-align: center;\n    margin-bottom: 3rem;\n}\n\n.page-header h1 {\n    color: #fff;\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n}\n\n.hero {\n    text-align: center;\n    padding: 4rem 2rem;\n    background: #1a1a1a;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n    margin-bottom: 3rem;\n}\n\n.hero-title {\n    font-size: 3.5rem;\n    color: #fff;\n    margin-bottom: 1rem;\n    font-weight: 700;\n}\n\n.hero-subtitle {\n    font-size: 1.5rem;\n    color: #aaa;\n    margin-bottom: 3rem;\n}\n\n.hero-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 2rem;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.stat-card {\n    background: var(--primary);\n    padding: 2rem;\n    border-radius: 8px;\n    color: white;\n}\n\n.stat-card h3 {\n    font-size: 3rem;\n    margin-bottom: 0.5rem;\n}\n\n.stat-card p {\n    font-size: 1.1rem;\n}\n\n.page-header {\n    margin-bottom: 2rem;\n}\n\n.page-header h1 {\n    font-size: 2.5rem;\n    color: white;\n    margin-bottom: 1rem;\n}\n\n.filters {\n    display: flex;\n    gap: 1rem;\n    margin-top: 1rem;\n}\n\n.search-input,\n.filter-select {\n    padding: 0.8rem 1.2rem;\n    border: 1px solid var(--border);\n    border-radius: 4px;\n    font-size: 14px;\n    background: #1a1a1a;\n    color: #fff;\n}\n\n.search-input::placeholder {\n    color: #666;\n}\n\n.search-input {\n    flex: 1;\n}\n\n.filter-select {\n    min-width: 200px;\n}\n\n.games-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 2rem;\n}\n\n.game-card {\n    background: #1a1a1a;\n    border-radius: 8px;\n    overflow: hidden;\n    border: 1px solid var(--border);\n    transition: border-color 0.3s;\n    cursor: pointer;\n}\n\n.game-card:hover {\n    border-color: var(--primary);\n}\n\n.game-image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n}\n\n.game-content {\n    padding: 1.5rem;\n}\n\n.game-title {\n    font-size: 1.3rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    color: #fff;\n}\n\n.game-meta {\n    display: flex;\n    gap: 1rem;\n    margin-bottom: 1rem;\n    font-size: 0.9rem;\n    color: var(--gray);\n}\n\n.game-description {\n    color: var(--gray);\n    margin-bottom: 1rem;\n    line-height: 1.6;\n}\n\n.game-tags {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n}\n\n.tag {\n    background: rgba(255, 107, 53, 0.1);\n    color: var(--primary);\n    padding: 0.3rem 0.8rem;\n    border-radius: 4px;\n    font-size: 0.85rem;\n    font-weight: 500;\n    border: 1px solid var(--border);\n}\n\n.info-section {\n    margin-bottom: 2rem;\n}\n\n.info-card {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n}\n\n.info-card h3 {\n    margin-bottom: 1rem;\n    color: #fff;\n}\n\n.info-card p {\n    color: #aaa;\n}\n\n.info-card p {\n    margin-bottom: 0.5rem;\n}\n\n.info-card a {\n    color: var(--primary);\n    text-decoration: none;\n    font-weight: 600;\n}\n\n.info-card a:hover {\n    text-decoration: underline;\n}\n\n.request-form-container,\n.requests-list {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n    margin-bottom: 2rem;\n}\n\n.request-form-container h2,\n.requests-list h2 {\n    color: #fff;\n}\n\n.form {\n    max-width: 800px;\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n    color: #fff;\n}\n\n.form-group input,\n.form-group textarea,\n.form-group select {\n    width: 100%;\n    padding: 0.8rem;\n    border: 1px solid var(--border);\n    border-radius: 4px;\n    font-family: inherit;\n    font-size: 14px;\n    transition: border-color 0.3s;\n    background: #0a0a0a;\n    color: #fff;\n}\n\n.form-group input:focus,\n.form-group textarea:focus,\n.form-group select:focus {\n    outline: none;\n    border-color: var(--primary);\n}\n\n.game-form {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n}\n\n.request-item {\n    padding: 1.5rem;\n    border: 2px solid var(--border);\n    border-radius: 10px;\n    margin-bottom: 1rem;\n}\n\n.request-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: start;\n    margin-bottom: 1rem;\n}\n\n.request-status {\n    padding: 0.3rem 0.8rem;\n    border-radius: 4px;\n    font-size: 0.85rem;\n    font-weight: 600;\n}\n\n.status-pending {\n    background: var(--warning);\n    color: white;\n}\n\n.status-approved {\n    background: var(--success);\n    color: white;\n}\n\n.status-rejected {\n    background: var(--danger);\n    color: white;\n}\n\n.admin-tabs {\n    display: flex;\n    gap: 1rem;\n    margin-bottom: 2rem;\n    background: #1a1a1a;\n    padding: 1rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n}\n\n.admin-tab {\n    padding: 1rem 2rem;\n    border: none;\n    background: transparent;\n    cursor: pointer;\n    font-weight: 600;\n    color: #aaa;\n    border-radius: 4px;\n    transition: all 0.3s;\n}\n\n.admin-tab.active {\n    background: var(--primary);\n    color: white;\n}\n\n.admin-section {\n    display: none;\n}\n\n.admin-section.active {\n    display: block;\n}\n\n.admin-table {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n}\n\n.table-row {\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border);\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr auto;\n    gap: 1rem;\n    align-items: center;\n}\n\n.table-row:last-child {\n    border-bottom: none;\n}\n\n.table-actions {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.btn-sm {\n    padding: 0.4rem 1rem;\n    font-size: 0.85rem;\n}\n\n.settings-card {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n    margin-bottom: 2rem;\n}\n\n.settings-card h3 {\n    margin-bottom: 1rem;\n    color: #fff;\n}\n\n.toggle {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n    margin-right: 1rem;\n}\n\n.toggle input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.toggle-slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--gray);\n    transition: 0.3s;\n    border-radius: 34px;\n}\n\n.toggle-slider:before {\n    position: absolute;\n    content: \"\";\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    transition: 0.3s;\n    border-radius: 50%;\n}\n\n.toggle input:checked + .toggle-slider {\n    background-color: var(--primary);\n}\n\n.toggle input:checked + .toggle-slider:before {\n    transform: translateX(26px);\n}\n\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    animation: fadeIn 0.3s;\n}\n\n.modal.active {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.modal-content {\n    background: #1a1a1a;\n    padding: 2rem;\n    border-radius: 8px;\n    width: 90%;\n    max-width: 500px;\n    position: relative;\n    animation: slideUp 0.3s;\n    border: 1px solid var(--border);\n}\n\n.modal-content h2 {\n    color: #fff;\n    margin-bottom: 1.5rem;\n}\n\n.modal-large {\n    max-width: 900px;\n}\n\n@keyframes slideUp {\n    from {\n        transform: translateY(50px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n.modal-close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    font-size: 2rem;\n    cursor: pointer;\n    color: #888;\n    background: rgba(0, 0, 0, 0.5);\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.3s ease;\n    border: none;\n    z-index: 1001;\n}\n\n.modal-close:hover {\n    color: var(--primary);\n    background: rgba(255, 107, 53, 0.1);\n    transform: scale(1.1);\n}\n\n.game-detail-header {\n    display: grid;\n    grid-template-columns: 300px 1fr;\n    gap: 2rem;\n    margin-bottom: 2rem;\n}\n\n.game-detail-image {\n    width: 100%;\n    border-radius: 10px;\n}\n\n.game-detail-info h2 {\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n\n.game-detail-meta {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n    margin-bottom: 1rem;\n}\n\n.meta-item {\n    background: #0a0a0a;\n    padding: 0.5rem 1rem;\n    border-radius: 4px;\n    font-size: 0.9rem;\n    border: 1px solid var(--border);\n}\n\n.game-detail-section {\n    margin-bottom: 2rem;\n}\n\n.game-detail-section h3 {\n    margin-bottom: 1rem;\n}\n\n.comments-section {\n    margin-top: 2rem;\n    padding-top: 2rem;\n    border-top: 2px solid var(--border);\n}\n\n.comment-form {\n    margin-bottom: 2rem;\n}\n\n.comment {\n    background: #0a0a0a;\n    padding: 1.5rem;\n    border-radius: 8px;\n    margin-bottom: 1rem;\n    border: 1px solid var(--border);\n}\n\n.comment p {\n    color: #ddd;\n}\n\n.comment-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.5rem;\n}\n\n.comment-author {\n    font-weight: 600;\n    color: #fff;\n}\n\n.role-badge {\n    display: inline-block;\n    padding: 0.2rem 0.6rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    margin-left: 0.5rem;\n    font-weight: 600;\n}\n\n.badge-admin {\n    background: var(--danger);\n    color: white;\n}\n\n.badge-gameadder {\n    background: var(--primary);\n    color: white;\n}\n\n.badge-basic {\n    background: var(--gray);\n    color: white;\n}\n\n.comment-actions {\n    display: flex;\n    gap: 1rem;\n    margin-top: 0.5rem;\n}\n\n.comment-action {\n    background: none;\n    border: none;\n    color: var(--primary);\n    cursor: pointer;\n    font-size: 0.9rem;\n}\n\n.comment-action:hover {\n    text-decoration: underline;\n}\n\n.comment-likes {\n    color: var(--gray);\n    font-size: 0.9rem;\n}\n\n@media (max-width: 768px) {\n    .nav-container {\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .nav-links {\n        flex-direction: column;\n        width: 100%;\n    }\n\n    .hero-title {\n        font-size: 2rem;\n    }\n\n    .games-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .form-row {\n        grid-template-columns: 1fr;\n    }\n\n    .game-detail-header {\n        grid-template-columns: 1fr;\n    }\n\n    .table-row {\n        grid-template-columns: 1fr;\n    }\n}\n","size_bytes":16229}},"version":1}